{"version":3,"sources":["firebase.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","TodoApp","useState","task","setTask","tasklist","setTaskList","className","type","name","id","onChange","e","target","value","handleChange","placeholder","onClick","taskDetails","Math","floor","random","isCompleted","collection","add","then","alert","catch","error","map","t","preventDefault","element","findIndex","elem","newTaskList","taskCompleted","filter","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wQAiBMA,G,YAXYC,EAASC,cAAe,CACtCC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKWC,a,OC8EPC,MA3Ff,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAqDA,OACE,sBAAKC,UAAU,OAAf,UACE,uBACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHC,SAAU,SAACC,GAAD,OAzDK,SAACA,GACpBR,EAAQQ,EAAEC,OAAOC,OAwDIC,CAAaH,IAC9BI,YAAY,qBAEd,wBAAQT,UAAU,UAAUU,QAxDhB,WACd,GAAa,KAATd,EAAa,CACf,IAAMe,EAAc,CAClBR,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBP,MAAOX,EACPmB,aAAa,GAIf/B,EAAGgC,WAAW,SAASC,IAAI,CACzBrB,KAAKA,IAENsB,MAAK,WACJC,MAAM,IAAIvB,EAAK,8BAEhBwB,OAAM,SAACC,GACNF,MAAME,EAAMzB,SAEdC,EAAQ,IAERE,EAAY,GAAD,mBAAKD,GAAL,CAAea,OAoC1B,iBAGA,uBACCb,IAAa,GACZ,6BACGA,EAASwB,KAAI,SAACC,GAAD,OACZ,qBAAIvB,UAAWuB,EAAER,YAAc,YAAc,WAA7C,UACGQ,EAAEhB,MACH,wBACEP,UAAU,YACVU,QAAS,SAACL,GAAD,OArCD,SAACA,EAAGF,GACxBE,EAAEmB,iBAEF,IAAMC,EAAU3B,EAAS4B,WAAU,SAACC,GAAD,OAAUA,EAAKxB,IAAMA,KAGlDyB,EAAW,YAAO9B,GAGxB8B,EAAYH,GAAZ,2BACKG,EAAYH,IADjB,IAEEV,aAAa,IAGfhB,EAAY6B,GAuBgBC,CAAcxB,EAAGkB,EAAEpB,KAFrC,uBAOA,wBAAQH,UAAU,SAASU,QAAS,SAACL,GAAD,OA/C7B,SAACA,EAAGF,GACrBE,EAAEmB,iBACFzB,EAAYD,EAASgC,QAAO,SAACP,GAAD,OAAOA,EAAEpB,IAAMA,MA6CU4B,CAAW1B,EAAGkB,EAAEpB,KAA3D,4BAMJ,SC5EK6B,MATf,WACE,OACE,sBAAKhC,UAAU,MAAf,UACE,sBAAMA,UAAU,QAAhB,uBADF,IAC2C,uBACzC,cAAC,EAAD,QCGciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACL2B,QAAQ3B,MAAMA,EAAM4B,c","file":"static/js/main.91cd41e2.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n\r\n\r\n\r\n\r\nvar firebaseApp = firebase.initializeApp ({\r\n    apiKey: \"AIzaSyAmv6-v4f8rSpzfq0KKKwQ0VWLqq8nsXuI\",\r\n    authDomain: \"toufikfirebase.firebaseapp.com\",\r\n    projectId: \"toufikfirebase\",\r\n    storageBucket: \"toufikfirebase.appspot.com\",\r\n    messagingSenderId: \"560593820466\",\r\n    appId: \"1:560593820466:web:551661269bf559abfa152b\",\r\n    \r\n  });\r\n  // Initialize Firebase\r\n  \r\n  var db =firebaseApp.firestore();\r\n\r\n  export { db };\r\n  \r\n","import React, { useState } from \"react\";\r\nimport \"./todoapp.css\";\r\nimport { db } from \"../firebase\";\r\n\r\nfunction TodoApp() {\r\n  const [task, setTask] = useState(\"\");\r\n  const [tasklist, setTaskList] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n  const AddTask = () => {\r\n    if (task !== \"\") {\r\n      const taskDetails = {\r\n        id: Math.floor(Math.random() * 1000),\r\n        value: task,\r\n        isCompleted: false,\r\n\r\n       \r\n      };\r\n      db.collection('title').add({\r\n        task:task,\r\n      })\r\n      .then(()=> {\r\n        alert(\"'\"+task+\"' submitted to firebase\");\r\n      })\r\n      .catch((error)=> {\r\n        alert(error.task)\r\n      });\r\n      setTask(\"\");\r\n\r\n      setTaskList([...tasklist, taskDetails]);\r\n    }\r\n    \r\n  };\r\n\r\n  const deletetask = (e, id) => {\r\n    e.preventDefault();\r\n    setTaskList(tasklist.filter((t) => t.id != id));\r\n  };\r\n\r\n  const taskCompleted = (e, id) => {\r\n    e.preventDefault();\r\n    //let's find index of element\r\n    const element = tasklist.findIndex((elem) => elem.id == id);\r\n\r\n    //copy array into new variable\r\n    const newTaskList = [...tasklist];\r\n\r\n    //edit our element\r\n    newTaskList[element] = {\r\n      ...newTaskList[element],\r\n      isCompleted: true,\r\n    };\r\n\r\n    setTaskList(newTaskList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"text\"\r\n        id=\"text\"\r\n        onChange={(e) => handleChange(e)}\r\n        placeholder=\"Add task here...\"\r\n      />\r\n      <button className=\"add-btn\" onClick={AddTask}>\r\n        Add\r\n      </button>\r\n      <br />\r\n      {tasklist !== [] ? (\r\n        <ul>\r\n          {tasklist.map((t) => (\r\n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\r\n              {t.value}\r\n              <button\r\n                className=\"completed\"\r\n                onClick={(e) => taskCompleted(e, t.id)}\r\n              >\r\n                Completed\r\n              </button>\r\n\r\n              <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoApp from \"./components/TodoApp\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <span className=\"title\">Todo List</span> <br />\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}